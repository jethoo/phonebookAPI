{"version":3,"sources":["Search.js","Filter.js","PersonForm.js","services/persons.js","Notification.js","App.js","index.js"],"names":["Search","searchVar","handleClick","map","person","name","number","onClick","value","id","Filter","text","onChange","PersonForm","handleNameSubmit","handleNameChange","handleNumberChange","onSubmit","type","baseUrl","axios","get","then","response","data","newObject","post","delete","status","put","Notification","errorMessage","successMessage","className","App","useState","persons","setPersons","Date","call","setCall","setErrorMessage","setSuccessMessage","useEffect","PersonService","initialData","newName","setNewName","setNewNumber","search","setSearch","event","filter","toLowerCase","includes","target","preventDefault","result","find","changedPerson","window","confirm","updatedPerson","setTimeout","catch","error","console","log","returnedPerson","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cce5c34f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Search = ({ searchVar, handleClick }) => {\n    return (\n        searchVar.map(person => {\n            return <p key={person.id}>{person.name} {person.number} <button onClick={handleClick} value={person.id} name={person.name} key={person.id}>Delete</button></p>\n        })\n    );\n}\n\nexport default Search;","import React from 'react'\n\nconst Filter = ({text, onChange}) => {\n    return (\n        <p>{text} <input onChange={onChange} /></p>\n    );\n}\n\nexport default Filter;","import React from 'react'\n\nconst PersonForm = ({handleNameSubmit,handleNameChange,handleNumberChange}) => {\n    return (\n        <form onSubmit={handleNameSubmit}>\n            <div>\n            name: <input onChange={handleNameChange} />\n            </div>\n            <div>\n            number: <input onChange={handleNumberChange} />\n            </div>\n            <div>\n            <button type=\"submit\">add</button>\n            </div>\n        </form>\n    );\n}\n\nexport default PersonForm;","import axios from 'axios'\n//part3 endpoint\nconst baseUrl = '/api/persons'\n//part2 endpoint\n//const baseUrl = 'http://localhost:3001/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n  }\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst destroy = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.status)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\n  \nexport default { getAll, create, destroy, update }","import React from 'react'\n\nconst Notification = ({ errorMessage, successMessage }) => {\n   \n    return (\n        <div>\n            {(errorMessage == null && successMessage == null) ? null \n            : (errorMessage == null) ? <div className=\"success\">{successMessage}</div>\n            :  <div className=\"error\">{errorMessage}</div>\n            }\n        </div>\n    )   \n}\n\nexport default Notification","import React, { useEffect, useState } from 'react'\nimport Search from './Search';\nimport Filter from './Filter';\nimport PersonForm from './PersonForm';\nimport PersonService from './services/persons';\nimport Notification from './Notification'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ call, setCall ] = useState(new Date()) \n  const [errorMessage, setErrorMessage] = useState();\n  const [successMessage, setSuccessMessage] = useState();\n\n  useEffect(() => {\n     PersonService\n        .getAll()\n          .then(initialData => {\n            setPersons(initialData)\n          })\n  }, [call])\n  \n  const [ newName, setNewName ] = useState('')\n  const [ number, setNewNumber ] = useState('')\n  const [ search, setSearch ] = useState('')\n\n  \n  const handleNameChange = (event) => {\n      setNewName(event.target.value);\n  }\n  \n  const handleNumberChange = (event) => {\n      setNewNumber(event.target.value);\n  }\n  \n  const handleSearchChange = (event) => {\n    setSearch(persons.filter(person => (person.name.toLowerCase()).includes(event.target.value.toLowerCase())))\n  }\n  \n  //check if search is empty or not\n  let searchVar = '';\n  if(search){\n    searchVar = search;\n  }else{\n    searchVar = persons;\n  }\n\n  const handleNameSubmit = (event) => {\n    event.preventDefault();\n    //also check if the entered name is already present \n    let result = persons.find(person => person.name === newName);\n    \n    if(result != null){\n      let id =  result.id;\n      const changedPerson = { ...result, number: number}\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`))\n      {\n          PersonService\n            .update(id, changedPerson)\n              .then(updatedPerson => {\n                setSuccessMessage(\n                  `Updated Contact Number of ${newName}`\n                )\n                setTimeout(() => {\n                  setSuccessMessage(null)\n                }, 5000)\n                //update the state\n                setPersons(persons.map(person => person.id !== id ? person : updatedPerson))\n              })\n              //if promise rejected catch the error\n              .catch(error => {\n                   console.log('error is', error)\n                  setErrorMessage(\n                    `Information of ${newName} has already been removed from server`\n                  )\n                  setTimeout(() => {\n                    setErrorMessage(null)\n                  }, 5000)\n              })\n      }}\n      else{\n        PersonService\n          .create({newName,number})\n          .then(returnedPerson => {\n            setSuccessMessage(\n              `Added ${newName}`\n            )\n            setPersons(persons.concat(returnedPerson))\n            setNewName('')\n            setNewNumber('')\n            //set Successmessage\n            \n            setTimeout(() => {\n              setSuccessMessage(null)\n            }, 5000)\n        })\n        .catch( error => {\n          //this is the way to access the error message\n           setErrorMessage(\n              `${error.response.data.error}`\n           )\n           setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n    \n  }\n}\n\n  const handleDelClick = (event) => {\n    let id = event.target.value;\n    \n    if (window.confirm(`Delete ${event.target.name} ?`)){\n      PersonService\n      .destroy(id)\n      .then(status => {\n          //status code for part2 is 200\n          //if(status === 200){\n          //but status code for part3, delete action is 204  \n          //console.log('status is ', status)\n          if(status === 204){\n            setCall(new Date())\n            setSuccessMessage(`Information  of ${event.target.name} has been deleted.`)\n          }\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Information of ${event.target.name} has already been removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n    })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      \n      <Notification errorMessage={errorMessage} successMessage={successMessage}/>\n      <Filter text={'filter shown with'} onChange={handleSearchChange}/>\n      <PersonForm \n            handleNameSubmit={handleNameSubmit} \n            handleNameChange={handleNameChange} \n            handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Search searchVar={searchVar} handleClick={handleDelClick}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}